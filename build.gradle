plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

loom {
}

configurations {
	includeCompile
	implementation.extendsFrom includeCompile
}


repositories {
	mavenLocal();

    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }

	maven {
		name = "Terraformers"
		url = "https://maven.terraformersmc.com/"
	}

	maven {
		name = "Amarok Maven"
		url = "http://maven.snowlyicewolf.club"
		allowInsecureProtocol = true
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-1.20.2:2023.10.08@zip")
	}
     
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "com.terraformersmc:modmenu:13.0.2"

	includeCompile "club.someoneice.json:amarok-json-for-java:1.7.6"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}

	from {
		configurations.includeCompile.collect { it.isDirectory() ? it : zipTree(it) }
	}
}